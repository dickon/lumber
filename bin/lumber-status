#! /usr/bin/env python

from os import listdir, getcwd
from os.path import join, exists, split
from sys import stderr
from math import floor, log10
from subprocess import Popen, PIPE
from lumber.options import read_options
from lumber.traverse import traverse_local

def search_back(repo, predicate, start, limit=None):
    for depth, entry in enumerate(repo.get_walker(max_entries=limit,
                                                  include=[start])):
        if predicate(entry.commit.id):
            return depth
    return 'many'

def pad(text, length):
    """Pad text out to length using spaces on the left"""
    return (' '*max(0, length-len(text)))+text

def run_no_check(command, cwd=None):
    """Run command in cwd, return stdout. Ignore non-zero exit codes"""
    process = Popen(command, cwd=cwd, stdout=PIPE)
    stdout, _ = process.communicate()
    return stdout

def scan_repo(branch, work_repo, central_repo, longest=32):
    """Scan repository locally and remotely and return a summary string.

    :param branch: branch to consider
    :param work_path: path of work repository
    :param central_path: path of central repository
    :param longest: assume at most this many characaters in the repository
    """
    try:
        master = central_repo[central_repo.ref('refs/heads/'+branch)]
    except KeyError:
        return
    out = pad(split(work_repo.path)[1], longest)+ ' '
    lmaster = work_repo.ref('refs/heads/'+branch)
    unpulled = search_back(central_repo, lambda x: x in work_repo, master.id,
                           limit=longest)
    if not unpulled:
        out += '(up to date) '
    else:
        out += 'unpulled='+str(unpulled) + ('+' if unpulled == longest 
                                            else '') + ' '
    lindex = work_repo.open_index()
    difflines = len(run_no_check(['git', 'diff'], 
                                 cwd=work_repo.path).split('\n')) - 1
    if difflines:
        out += 'diff_lines=%d ' % (difflines)
    changes = list(lindex.changes_from_tree(work_repo.object_store, 
                                            work_repo['HEAD'].tree))
    
    if changes:
        out += 'staged_files=%d ' % (len(changes))
    unpushed = search_back(work_repo, lambda x: x in central_repo, lmaster)
    if unpushed:
        out += 'unpushed='+str(unpushed)+ ' '
    return out

options, _ = read_options()
if options.central is None:
    print >>stderr, 'ERROR: no central repository directory; configure with -c or config file'
    exit(1)
for work_repo, central_repo in traverse_local(options.work, options.central):
    out = scan_repo(options.branch, work_repo, central_repo, 40)
    if out:
        print out

